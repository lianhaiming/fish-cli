#!/usr/bin/env node

const program = require('commander');
const { resolve } = require('path');
const exists = require('fs').existsSync;
const chalk = require('chalk');
const home = require('user-home');
const download = require('download-git-repo');
const inquirer = require('inquirer');
// 生成文件
const Metalsmith = require('metalsmith');
const rm = require('rimraf').sync;
const ora = require('ora');

console.log()
process.on('exit', function() {
        console.log()
    })
    /**
     * Usage
     * 
     */
var log = console.log;
program
    .usage('<filename> [options]')
    .option('-t  --type [type]', '项目类型', 'h5')
    .option('--offline', 'get project from cache')
    .parse(process.argv)

/**
 * Help
 */
if (program.args.length < 1) program.help();

// 生成项目名称
var name = program.args[0];
// 生成项目类型
var type = program.type;
// 生成项目路径
var to = resolve(name);
// 本地模板存放的路径
var localTmp = resolve(home, '.fish-template', type);
// 线上存放模板的路径
var remoteTmp = `fish-template/${type}`;

if (exists(to)) {
    inquirer.prompt([{
        type: 'confirm',
        message: '项目存在，是否覆盖',
        name: 'ok'
    }]).then(function(answer) {
        if (answer.ok) {
            rm(to);
            getTemplateFromRemoteOrLocal(program.offline);
        } else {
            process.exit(1);
        }
    })
} else {
    getTemplateFromRemoteOrLocal(program.offline);
}

/**
 * 
 * @param offline 是否取缓存 
 */
function getTemplateFromRemoteOrLocal(offline) {
    if (offline) {
        generate(program.type, localTmp, to);
    } else {
        DownloadAndGenerate(remoteTmp, localTmp, function(err) {
            log(chalk.red(err));
        })
    }
}
/**
 * 
 * @param tmp 远程模板路径或者本地路径
 * @param to 生成项目文件路径
 * @param fn 回调函数
 */

function DownloadAndGenerate(remoteT, localT, fn) {
    if (exists(localT)) rm(localT);
    var spinner = ora('get template');
    spinner.start();
    download(remoteT, localT, { clone: 'clone' }, function(err) {
        log(chalk.green('get templeate success'));
        spinner.stop();
        generate(type, localT, to, function(err) {
            chalk.red(err);
        });

    })
}

function generate(type, src, dest, done) {
    var metalsmith = new Metalsmith(src);
    metalsmith
        .clean(true)
        .source('.')
        .destination(dest)
        .build(function(err, files) {
            if (err) done(err);
            log(chalk.green('generate success'));
        })
}